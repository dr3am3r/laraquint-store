services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medusa_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medusa-store}
      POSTGRES_USER: ${POSTGRES_USER:-medusa}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # Don't expose ports publicly in production
    # Only accessible within docker network
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medusa}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: medusa_redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Medusa Server Instance
  # Handles API requests and serves Admin dashboard
  medusa-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medusa_server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:9000:9000"
    environment:
      - NODE_ENV=production
      - MEDUSA_WORKER_MODE=server
      - DISABLE_MEDUSA_ADMIN=false
      - DATABASE_URL=postgres://${POSTGRES_USER:-medusa}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-medusa-store}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - STORE_CORS=${STORE_CORS}
      - ADMIN_CORS=${ADMIN_CORS}
      - AUTH_CORS=${AUTH_CORS}
    networks:
      - medusa_network

  # Medusa Worker Instance
  # Handles background jobs and scheduled tasks
  medusa-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medusa_worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - MEDUSA_WORKER_MODE=worker
      - DISABLE_MEDUSA_ADMIN=true
      - DATABASE_URL=postgres://${POSTGRES_USER:-medusa}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-medusa-store}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
    networks:
      - medusa_network

  # Caddy - Reverse proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: medusa_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - medusa_network
    depends_on:
      - medusa-server

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  medusa_network:
    driver: bridge
